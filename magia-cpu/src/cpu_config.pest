chunk = _{ SOI ~ (rule)+ ~ EOI }

static_operand = { ("s") }
register_operand = { ("r") }
register_to_register = { ("rr") }
memory_to_memory = { ("mm") }
effective_address_to_register = { ("er") }
register_to_effective_address = { ("re") }
data_register_to_data_register = { ("dd") }
data_register_to_address_register = { ("da") }
address_register_to_address_register = { ("aa") }
control_register_to_register = { ("cr") }
register_to_control_register = { ("rc") }
to_condition_code_register = { ("toc") }
to_status_register = { ("tos") }
to_user_stack_pointer = { ("tou") }
from_condition_code_register = { ("frc") }
from_status_register = { ("frs") }
from_user_stack_pointer = { ("fru") }
address_register_7_indirect_with_postincrement = { ("pi7") }
address_register_7_indirect_with_pd7 = { ("pd7") }

normal = { (".") }
immediate = { ("i") }
data_register = { ("d") }
address_register = { ("a") }
address_register_indirect = { ("ai") }
address_register_indirect_with_postinc = { ("pi") }
address_register_indirect_with_predec = { ("pd") }
address_register_indirect_with_displacement = { ("di") }
address_register_indirect_with_index = { ("ix") }
absolute_word_address = { ("aw") }
absolute_long_address = { ("al") }
program_counter_relative_with_displacement = { ("pcdi") }
program_counter_relative_with_index = { ("pcix") }
register_specified_in_instruction_is_a7 = { ("a7") }
register_field_x_of_instruction_is_a7 = { ("ax7") }
register_field_y_of_instruction_is_a7 = { ("ay7") }
register_fields_x_and_y_of_instruction_are_a7 = { ("axy7") }

ea_not_present = { (".") }
ea_adress_register_indirect = { ("A") }
ea_ari_with_postincrement = { ("+") }
ea_ari_with_predecrement = { ("-") }
ea_ari_with_displacement = { ("D") }
ea_ari_with_index = { ("X") }
ea_absolute_word_address = { ("W") }
ea_absolute_long_address = { ("L") }
ea_program_counter_indirect_with_displacement = { ("d") }
ea_program_counter_indirect_with_index = { ("x") }
ea_immediate = { ("I") }

mode_not_preset = { (".") }
mode_supervisor = { ("S") }
mode_user = { ("U") }

spec_proc = @{ (
    normal |
    memory_to_memory |
    register_to_register |
    effective_address_to_register |
    register_to_effective_address |
    data_register_to_data_register |
    data_register_to_address_register |
    address_register_to_address_register |
    control_register_to_register |
    register_to_control_register |
    to_condition_code_register |
    to_status_register |
    to_user_stack_pointer |
    from_condition_code_register |
    from_status_register |
    from_user_stack_pointer |
    register_operand |
    address_register_7_indirect_with_postincrement |
    address_register_7_indirect_with_pd7 |
    address_register_indirect |
    address_register_indirect_with_postinc |
    address_register_indirect_with_predec |
    address_register_indirect_with_displacement |
    address_register_indirect_with_index |
    absolute_word_address |
    absolute__address |
    static_operand |
    data_register)
}

spec_ea = @{ (
    normal |
    address_register_indirect |
    address_register_indirect_with_postinc |
    address_register_indirect_with_predec |
    address_register_indirect_with_index |
    absolute_word_address |
    absolute_long_address |
    program_counter_relative_with_displacement |
    program_counter_relative_with_index |
    register_fields_x_and_y_of_instruction_are_a7 |
    register_specified_in_instruction_is_a7 |
    register_field_x_of_instruction_is_a7 |
    register_field_y_of_instruction_is_a7 |
    address_register_indirect_with_displacement |
    address_register |
    immediate |
    data_register
) }

mode = { (
    mode_not_preset |
    mode_user |
    mode_supervisor
) }

allowed_ea = { (
    ea_not_present |
    ea_adress_register_indirect |
    ea_ari_with_postincrement |
    ea_ari_with_predecrement |
    ea_ari_with_displacement |
    ea_ari_with_index |
    ea_absolute_word_address |
    ea_absolute_long_address |
    ea_program_counter_indirect_with_displacement |
    ea_program_counter_indirect_with_index |
    ea_immediate
) }

rule = { (
    name_or_num ~ num ~ spec_proc ~
    spec_ea ~ bit_pattern ~ allowed_eas ~
    mode ~ mode ~ mode ~
    num ~ num ~ num
) }

allowed_eas = @{ (allowed_ea)* }
name_or_num = @{ (('a'..'z') | ('A'..'Z') | ("_") | ('0'..'9'))* }
bit_pattern = @{ (('0'..'1') | ("."))* }
num = @{ (('0'..'9') | ("."))* }

WHITESPACE = _{ (" ") | ("\t") | ("\u{000C}") | ("\r") | ("\n") }
COMMENT = _{ ("//") ~ !("/") ~ (!(("\r") | ("\n")) ~ ANY)* ~ (("\n") | ("\r\n") | ("\r") | EOI) }

