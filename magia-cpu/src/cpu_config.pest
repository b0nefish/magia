chunk = _{ SOI
	~ (rule | (("\t") ~ code))+
    ~ EOI
 }

size_unsized = { (".") }
size_byte = { ("b") }
size_word = { ("w") }
size_long = { ("l") }

ea_not_present = { (".") }
ea_adress_register_indirect = { ("A") }
ea_ari_with_postincrement = { ("+") }
ea_ari_with_predecrement = { ("-") }
ea_ari_with_displacement = { ("D") }
ea_ari_with_index = { ("X") }
ea_absolute_word_address = { ("W") }
ea_absolute_long_address = { ("L") }
ea_program_counter_indirect_with_displacement = { ("d") }
ea_program_counter_indirect_with_index = { ("x") }
ea_immediate = { ("I") }

rule = { (
    hex ~ hex ~ name ~ size ~ allowed_eas ~ (type_cycle)*
) }

code = { (ANY)* }

allowed_ea = { (
    ea_not_present |
    ea_adress_register_indirect |
    ea_ari_with_postincrement |
    ea_ari_with_predecrement |
    ea_ari_with_displacement |
    ea_ari_with_index |
    ea_absolute_word_address |
    ea_absolute_long_address |
    ea_program_counter_indirect_with_displacement |
    ea_program_counter_indirect_with_index |
    ea_immediate
) }

privl = @{ ("p") }
type_cycle = @{ (number | ("f") | ("c"))* ~ (":") ~ number ~ privl? }
allowed_eas = @{ (allowed_ea)* }
size = @{ (size_unsized | size_byte | size_word | size_long) }

number = @{ ('0' .. '9') }
hex = @{ ('a'..'f') ~ (('a'..'f') | number)* }
name = @{ (('a'..'z') | number) ~ (('a'..'z') | number)* }

WHITESPACE = _{ (" ") | ("\u{000C}") | ("\r") | ("\n") }
COMMENT = _{ ("//") ~ !("/") ~ (!(("\r") | ("\n")) ~ ANY)* ~ (("\n") | ("\r\n") | ("\r") | EOI) }

